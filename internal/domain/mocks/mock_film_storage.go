// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/film_storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/film_storage.go -destination=internal/domain/mocks/mock_film_storage.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	domain "github.com/vaberof/vk-internship-task/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockFilmStorage is a mock of FilmStorage interface.
type MockFilmStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFilmStorageMockRecorder
}

// MockFilmStorageMockRecorder is the mock recorder for MockFilmStorage.
type MockFilmStorageMockRecorder struct {
	mock *MockFilmStorage
}

// NewMockFilmStorage creates a new mock instance.
func NewMockFilmStorage(ctrl *gomock.Controller) *MockFilmStorage {
	mock := &MockFilmStorage{ctrl: ctrl}
	mock.recorder = &MockFilmStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmStorage) EXPECT() *MockFilmStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFilmStorage) Create(title domain.FilmTitle, description domain.FilmDescription, releaseDate domain.FilmReleaseDate, rating domain.FilmRating, actorIds []domain.ActorId) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title, description, releaseDate, rating, actorIds)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFilmStorageMockRecorder) Create(title, description, releaseDate, rating, actorIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilmStorage)(nil).Create), title, description, releaseDate, rating, actorIds)
}

// Delete mocks base method.
func (m *MockFilmStorage) Delete(id domain.FilmId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFilmStorageMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilmStorage)(nil).Delete), id)
}

// IsExists mocks base method.
func (m *MockFilmStorage) IsExists(id domain.FilmId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockFilmStorageMockRecorder) IsExists(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockFilmStorage)(nil).IsExists), id)
}

// ListWithSort mocks base method.
func (m *MockFilmStorage) ListWithSort(titleOrder, releaseDateOrder, ratingOrder string, limit, offset int) ([]*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithSort", titleOrder, releaseDateOrder, ratingOrder, limit, offset)
	ret0, _ := ret[0].([]*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithSort indicates an expected call of ListWithSort.
func (mr *MockFilmStorageMockRecorder) ListWithSort(titleOrder, releaseDateOrder, ratingOrder, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithSort", reflect.TypeOf((*MockFilmStorage)(nil).ListWithSort), titleOrder, releaseDateOrder, ratingOrder, limit, offset)
}

// SearchByFilters mocks base method.
func (m *MockFilmStorage) SearchByFilters(title domain.FilmTitle, actorName domain.ActorName, limit, offset int) ([]*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByFilters", title, actorName, limit, offset)
	ret0, _ := ret[0].([]*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByFilters indicates an expected call of SearchByFilters.
func (mr *MockFilmStorageMockRecorder) SearchByFilters(title, actorName, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByFilters", reflect.TypeOf((*MockFilmStorage)(nil).SearchByFilters), title, actorName, limit, offset)
}

// Update mocks base method.
func (m *MockFilmStorage) Update(id domain.FilmId, title *domain.FilmTitle, description *domain.FilmDescription, releaseDate *domain.FilmReleaseDate, rating *domain.FilmRating, actorIds *[]domain.ActorId) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, title, description, releaseDate, rating, actorIds)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFilmStorageMockRecorder) Update(id, title, description, releaseDate, rating, actorIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFilmStorage)(nil).Update), id, title, description, releaseDate, rating, actorIds)
}
