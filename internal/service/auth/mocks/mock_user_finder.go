// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth/user_finder.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/auth/user_finder.go -destination=internal/service/auth/mocks/mock_user_finder.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	user "github.com/vaberof/vk-internship-task/internal/service/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserFinder is a mock of UserFinder interface.
type MockUserFinder struct {
	ctrl     *gomock.Controller
	recorder *MockUserFinderMockRecorder
}

// MockUserFinderMockRecorder is the mock recorder for MockUserFinder.
type MockUserFinderMockRecorder struct {
	mock *MockUserFinder
}

// NewMockUserFinder creates a new mock instance.
func NewMockUserFinder(ctrl *gomock.Controller) *MockUserFinder {
	mock := &MockUserFinder{ctrl: ctrl}
	mock.recorder = &MockUserFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFinder) EXPECT() *MockUserFinderMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserFinder) FindByEmail(email string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserFinderMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserFinder)(nil).FindByEmail), email)
}
