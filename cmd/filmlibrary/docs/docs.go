// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/actors": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "List all actors with optional query parameters 'limit' and 'offset'",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actors"
                ],
                "summary": "List all actors with optional query parameters 'limit' and 'offset'",
                "operationId": "list-actors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'limit' that limits total number of returned actors. By default 'limit' = 100",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'offset' that indicates how many records should be skipped while listing actors. By default 'offset' = 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.listActorsResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create a new actor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actors"
                ],
                "summary": "Create a new actor",
                "operationId": "create-actor",
                "parameters": [
                    {
                        "description": "Actor object that needs to be created",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.createActorRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.createActorResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            }
        },
        "/actors/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete an actor by path parameter 'id'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actors"
                ],
                "summary": "Delete an actor by path parameter 'id'",
                "operationId": "delete-actor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Actors` + "`" + `s id that needs to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.deleteActorResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Update fully or partially an actor by path parameter 'id'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actors"
                ],
                "summary": "Update fully or partially an actor by path parameter 'id'",
                "operationId": "update-actor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Actors` + "`" + `s id that needs to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Actor object with values that will be updated",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.updateActorRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.updateActorResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            }
        },
        "/films": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "List all films with the possibility of sorting via 'sort' parameter by 'title' and/or 'rating' and/or 'release-date' and/or with 'limit' and/or 'offset' parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "List all films with optional 'sort', 'limit', 'offset' query parameters",
                "operationId": "list-films",
                "parameters": [
                    {
                        "type": "string",
                        "description": "An optional query parameter 'sort' that indicates how films should be sorted. By default 'sort' = 'rating:desc'. Expected as ` + "`" + `title:asc,release-date:desc,rating:desc` + "`" + ` in any order of necessary parameters",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'limit' that limits total number of returned films. By default 'limit' = 100",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'offset' that indicates how many records should be skipped while listing films. By default 'offset' = 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.listFilmsResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create a new film",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Create a new film",
                "operationId": "create-film",
                "parameters": [
                    {
                        "description": "Film object that needs to be created",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.createFilmRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.createFilmResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            }
        },
        "/films/searches": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Search films by film title or/and actor name with optional 'limit' and 'offset' query parameters.\nIf 'film-title' and 'actor-name' are empty, than non-empty list of films with max length = 'limit' will be returned",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Search films by film` + "`" + `s title or/and actor` + "`" + `s name with optional 'limit' and 'offset' query parameters",
                "operationId": "search-films",
                "parameters": [
                    {
                        "type": "string",
                        "description": "An optional query parameter 'film-title'",
                        "name": "film-title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "An optional query parameter 'actor-name'",
                        "name": "actor-name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'limit' that limits total number of returned films. By default 'limit' = 100",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "An optional query parameter 'offset' that indicates how many records should be skipped while listing films. By default 'offset' = 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.searchFilmsResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            }
        },
        "/films/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete a film by path parameter 'id'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Delete a film by path parameter 'id'",
                "operationId": "delete-film",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film` + "`" + `s id that needs to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.deleteFilmResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Update fully or partially a film by path parameter 'id'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Update fully or partially a film by path parameter 'id'",
                "operationId": "update-film",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Films` + "`" + `s id that needs to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Film object with values that will be updated",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.updateFilmRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_app_entrypoint_http.updateFilmResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_vaberof_vk-internship-task_pkg_http_protocols_apiv1.Response": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.actor": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.actorFilm"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                }
            }
        },
        "internal_app_entrypoint_http.actorFilm": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.createActorRequestBody": {
            "type": "object",
            "required": [
                "birthdate",
                "name",
                "sex"
            ],
            "properties": {
                "birthdate": {
                    "type": "string",
                    "example": "2006-01-02"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2,
                        9
                    ]
                }
            }
        },
        "internal_app_entrypoint_http.createActorResponseBody": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.actorFilm"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                }
            }
        },
        "internal_app_entrypoint_http.createFilmRequestBody": {
            "type": "object",
            "required": [
                "actor_ids",
                "rating",
                "release_date",
                "title"
            ],
            "properties": {
                "actor_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "rating": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 0
                },
                "release_date": {
                    "type": "string",
                    "example": "2006-01-02"
                },
                "title": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 1
                }
            }
        },
        "internal_app_entrypoint_http.createFilmResponseBody": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.filmActor"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.deleteActorResponseBody": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.deleteFilmResponseBody": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.film": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.filmActor"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_app_entrypoint_http.filmActor": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                }
            }
        },
        "internal_app_entrypoint_http.listActorsResponseBody": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.actor"
                    }
                }
            }
        },
        "internal_app_entrypoint_http.listFilmsResponseBody": {
            "type": "object",
            "properties": {
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.film"
                    }
                }
            }
        },
        "internal_app_entrypoint_http.searchFilmsResponseBody": {
            "type": "object",
            "properties": {
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.film"
                    }
                }
            }
        },
        "internal_app_entrypoint_http.updateActorRequestBody": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string",
                    "example": "2006-01-02"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "sex": {
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2,
                        9
                    ]
                }
            }
        },
        "internal_app_entrypoint_http.updateActorResponseBody": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "films": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.actorFilm"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                }
            }
        },
        "internal_app_entrypoint_http.updateFilmRequestBody": {
            "type": "object",
            "properties": {
                "actor_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "rating": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 0
                },
                "release_date": {
                    "type": "string",
                    "example": "2006-01-02"
                },
                "title": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 1
                }
            }
        },
        "internal_app_entrypoint_http.updateFilmResponseBody": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_app_entrypoint_http.filmActor"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Film Library API",
	Description:      "API Server for Film Library Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
